<?php

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-10-12 at 21:19:05.
 */
class PAF_Stream_PhpOutputTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var PAF_Stream_PhpOutput
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new PAF_Stream_PhpOutput;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @covers PAF_Stream_PhpOutput::close
     */
    public function testClose()
    {
        $this->assertNull($this->object->close());
    }

    /**
     * @covers PAF_Stream_PhpOutput::startBuffer
     */
    public function testStartBuffer()
    {
        $this->assertFalse($this->object->hasBuffer());
        $this->object->startBuffer();
        $this->assertTrue($this->object->hasBuffer());
        $this->object->startBuffer();
        $this->assertTrue($this->object->hasBuffer());
        $this->object->stopBuffer();
        $this->assertTrue($this->object->hasBuffer());
    }

    /**
     * @covers PAF_Stream_PhpOutput::hasBuffer
     */
    public function testHasBuffer()
    {
        $string1 = 'This is not buffered.';
        $string2 = 'Neither is this.';

        $this->expectOutputString($string1 . $string2);

        $this->assertFalse($this->object->hasBuffer());
        $this->object->put($string1);

        $this->object->startBuffer();
        $this->assertTrue($this->object->hasBuffer());
        $this->object->put('This is buffered, so it does not break the output test.');

        $this->object->stopBuffer();
        $this->assertFalse($this->object->hasBuffer());
        $this->object->put($string2);
    }

    /**
     * @covers PAF_Stream_PhpOutput::dropBuffer
     */
    public function testDropBuffer()
    {
        $this->expectOutputString('');
        
        $this->assertFalse($this->object->hasBuffer());
        $this->object->startBuffer();
        $this->assertTrue($this->object->hasBuffer());
        $this->object->dropBuffer();
        $this->assertFalse($this->object->hasBuffer());
    }

    /**
     * @covers PAF_Stream_PhpOutput::flushBuffer
     * @covers PAF_Stream_PhpOutput::<protected>
     */
    public function testFlushBuffer1of2()
    {
        $object = new PAF_Stream_PhpOutput();
        $object->startBuffer();
        
        $this->expectOutputString('');
        $object->put('buffered content');
        
        return $object;
    }
    
    /**
     * @covers PAF_Stream_PhpOutput::flushBuffer
     * @covers PAF_Stream_PhpOutput::<protected>
     * @depends testFlushBuffer1of2
     */
    public function testFlushBuffer2of2(PAF_Stream_PhpOutput $object)
    {
        $this->expectOutputString('buffered content');
        $object->flushBuffer();
    }

    /**
     * @covers PAF_Stream_PhpOutput::getBuffer
     */
    public function testGetBuffer()
    {
        $this->object->startBuffer();
        
        $this->expectOutputString('');
        
        $this->object->put('buffered content');
        $this->assertEquals('buffered content', $this->object->getBuffer());
    }

    /**
     * @covers PAF_Stream_PhpOutput::open
     */
    public function testOpen()
    {
        $this->assertNull($this->object->open());
    }

    /**
     * @covers PAF_Stream_PhpOutput::get
     */
    public function testGet()
    {
        $this->setExpectedException('PAF_Exception_NoImplementation');
        $this->object->get();
    }

    /**
     * @covers PAF_Stream_PhpOutput::put
     * @covers PAF_Stream_PhpOutput::<protected>
     */
    public function testPut()
    {
        $this->expectOutputString('streamed content');
        $this->object->put('streamed content');
        $this->object->startBuffer();
        $this->object->put('buffered content');
    }

    /**
     * @covers PAF_Stream_PhpOutput::stopBuffer
     */
    public function testStopBuffer()
    {
        $this->expectOutputString('streamed content');
        $this->object->startBuffer();
        $this->object->put('buffered content');
        $this->object->stopBuffer();
        $this->object->put('streamed content');
    }

    public function testDropBufferException()
    {
        $this->setExpectedException('PAF_Exception_NoSuchResource');
        $this->object->dropBuffer();
    }
    
    public function testFlushBufferException()
    {
        $this->setExpectedException('PAF_Exception_NoSuchResource');
        $this->object->flushBuffer();
    }
    
    public function testGetBufferException()
    {
        $this->setExpectedException('PAF_Exception_NoSuchResource');
        $this->object->getBuffer();
    }
    
    public function testStopBufferException()
    {
        $this->setExpectedException('PAF_Exception_NoSuchResource');
        $this->object->stopBuffer();
    }
}
