<?php

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-10-05 at 13:23:11.
 */
class PAF_Buffer_MemorySimpleTest extends PHPUnit_Framework_TestCase
{

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    public function testConstructor()
    {
        $object = new PAF_Buffer_MemorySimple();
        $this->assertInstanceOf('PAF_Buffer_MemorySimple', $object);

        $content = implode(PHP_EOL, array('LINE0', 'LINE1', 'LINE2'));

        $fixture = new stdClass();
        $fixture->object = $object;
        $fixture->content = $content;

        return $fixture;
    }

    /**
     * @covers PAF_Buffer_MemorySimple::push
     * @depends testConstructor
     */
    public function testPush($fixture)
    {
        $fixture->object->push($fixture->content);

        return $fixture;
    }

    /**
     * @covers PAF_Buffer_MemorySimple::get
     * @depends testPush
     */
    public function testGet($fixture)
    {
        $this->assertEquals($fixture->content, $fixture->object->get());
        $this->assertEquals($fixture->content, $fixture->object->get());
        return $fixture;
    }

    /**
     * @covers PAF_Buffer_MemorySimple::pull
     * @covers PAF_Buffer_MemorySimple::<protected>
     * @covers PAF_Buffer_MemorySimple::<private>
     * @depends testGet
     */
    public function testPull($fixture)
    {
        $arrayContent = explode(PHP_EOL, $fixture->content);

        $pullLine = $fixture->object->pull(1, PAF_Buffer_Interface::LINE);
        $this->assertEquals($arrayContent[0], $pullLine);

        $byteByByte = $arrayContent[1];

        for ($i = 0; $i < strlen($byteByByte); $i++)
        {
            $pullByte = $fixture->object->pull(1, PAF_Buffer_Interface::BYTE);
            $this->assertEquals($byteByByte[$i], $pullByte);
        }

        
        $fixture->object->pull(1, PAF_Buffer_Interface::LINE);

        $fixture->content = $arrayContent[2];
        return $fixture;
    }

    /**
     * @covers PAF_Buffer_MemorySimple::flush
     * @depends testPull
     */
    public function testFlush($fixture)
    {
        $this->assertEquals($fixture->content, $fixture->object->flush());
        $this->assertEquals('', $fixture->object->flush());
    }
    
    public function testPullException()
    {
        $this->setExpectedException('PAF_Exception_IllegalArgument');
        $object = new PAF_Buffer_MemorySimple();
        $object->pull(NULL, 'illegalValue');
    }

}
