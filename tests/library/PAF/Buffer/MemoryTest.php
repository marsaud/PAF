<?php

//require_once 'PAF/Buffer/Interface.php';
//require_once 'PAF/Buffer/AbleInterface.php';
//require_once 'PAF/Buffer/MemorySimple.php';
//require_once 'PAF/Buffer/Memory.php';

/**
 * Test class for PAF_Buffer_Memory.
 * Generated by PHPUnit on 2012-12-02 at 20:51:43.
 */
class PAF_Buffer_MemoryTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var PAF_Buffer_Memory
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new PAF_Buffer_Memory;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @covers PAF_Buffer_Memory::push
     * @covers PAF_Buffer_Memory::<protected>
     * @dataProvider pushProvider
     */
    public function testPush($first, $second, $all)
    {
        $this->assertEquals('', $this->object->get());
        $this->object->push($first);
        $this->assertEquals($first, $this->object->get());
        $this->object->push($second);
        $this->assertEquals($all, $this->object->get());
        
        $this->object->startBuffer();
        $this->assertEquals('', $this->object->getBuffer());
        $this->object->push($first);
        $this->assertEquals($first, $this->object->getBuffer());
        $this->object->push($second);
        $this->assertEquals($all, $this->object->getBuffer());
    }

    public function pushProvider()
    {
        $data = array();

        $data[] = array('a', 'b', 'ab');
        $data[] = array('a ', 'b ', 'a b ');
        $data[] = array(' a', ' b', ' a b');
        $data[] = array('a' . PHP_EOL, 'b' . PHP_EOL, 'a' . PHP_EOL . 'b' . PHP_EOL);
        $data[] = array(0, 1, '01');
        $data[] = array(NULL, 'a', 'a');
        $data[] = array('', 'a', 'a');
        $data[] = array('a', NULL, 'a');
        $data[] = array(NULL, NULL, '');
        $data[] = array('', '', '');

        return $data;
    }

    /**
     * @covers PAF_Buffer_Memory::startBuffer
     */
    public function testStartBuffer()
    {
        $this->assertFalse($this->object->hasBuffer());
//        try
//        {
//            $this->object->stopBuffer();
//            $this->fail();
//        }
//        catch (Exception $exc)
//        {
//            $this->assertInstanceOf('PAF_Exception_NoSuchResource', $exc);
//        }

        $this->object->startBuffer();
        $this->assertTrue($this->object->hasBuffer());
        $this->object->stopBuffer();
        $this->assertFalse($this->object->hasBuffer());
//        try
//        {
//            $this->object->stopBuffer();
//            $this->fail();
//        }
//        catch (Exception $exc)
//        {
//            $this->assertInstanceOf('PAF_Exception_NoSuchResource', $exc);
//        }

        $this->object->startBuffer();
        $this->assertTrue($this->object->hasBuffer());
        $this->object->startBuffer();
        $this->assertTrue($this->object->hasBuffer());
        $this->object->stopBuffer();
        $this->assertTrue($this->object->hasBuffer());
        $this->object->stopBuffer();
        $this->assertFalse($this->object->hasBuffer());
//        try
//        {
//            $this->object->stopBuffer();
//            $this->fail();
//        }
//        catch (Exception $exc)
//        {
//            $this->assertInstanceOf('PAF_Exception_NoSuchResource', $exc);
//        }
    }

    /**
     * @covers PAF_Buffer_Memory::dropBuffer
     */
    public function testDropBuffer()
    {
        $this->assertFalse($this->object->hasBuffer());
        try
        {
            $this->object->dropBuffer();
            $this->fail();
        }
        catch (Exception $exc)
        {
            $this->assertInstanceOf('PAF_Exception_NoSuchResource', $exc);
        }

        $this->object->startBuffer();
        $this->object->push('This is going to be dropped');
        $this->object->dropBuffer();
        $this->assertEquals('', $this->object->get());
        $this->assertFalse($this->object->hasBuffer());
//        try
//        {
//            $this->object->dropBuffer();
//            $this->fail();
//        }
//        catch (Exception $exc)
//        {
//            $this->assertInstanceOf('PAF_Exception_NoSuchResource', $exc);
//        }

        $this->object->startBuffer();
        $this->object->push('This is going to be dropped too');
        $this->object->startBuffer();
        $this->object->push('This is going to be dropped again and again');
        $this->object->dropBuffer();
        $this->object->dropBuffer();
        $this->assertEquals('', $this->object->get());
        $this->assertFalse($this->object->hasBuffer());
//        try
//        {
//            $this->object->dropBuffer();
//            $this->fail();
//        }
//        catch (Exception $exc)
//        {
//            $this->assertInstanceOf('PAF_Exception_NoSuchResource', $exc);
//        }
    }

    /**
     * @covers PAF_Buffer_Memory::flushBuffer
     */
    public function testFlushBuffer()
    {
        $this->object->startBuffer();
        $this->object->push('PUSHONE;');
        $this->assertEquals('', $this->object->get());
        $this->assertEquals('PUSHONE;', $this->object->getBuffer());
        
        $this->object->startBuffer();
        $this->object->push('PUSHTWO;');
        $this->assertEquals('PUSHTWO;', $this->object->getBuffer());
        $this->object->flushBuffer();
        $this->assertEquals('', $this->object->getBuffer());
        $this->object->stopBuffer();
        $this->assertEquals('PUSHONE;PUSHTWO;', $this->object->getBuffer());
    }
    
    /**
     * @covers PAF_Buffer_Memory::flushBuffer
     */
    public function testFlushBufferException()
    {
        $this->setExpectedException('PAF_Exception_NoSuchResource');
        $this->object->flushBuffer();
    }

    /**
     * @covers PAF_Buffer_Memory::getBuffer
     */
    public function testGetBuffer()
    {
        $this->object->startBuffer();
        $this->assertEquals('', $this->object->getBuffer());
        $this->object->push('PUSHONE;');
        $this->assertEquals('PUSHONE;', $this->object->getBuffer());
        $this->object->push('PUSHTWO;');
        $this->assertEquals('PUSHONE;PUSHTWO;', $this->object->getBuffer());
        
        $this->object->startBuffer();
        $this->assertEquals('', $this->object->getBuffer());
        $this->object->push('PUSHTHREE;');
        $this->assertEquals('PUSHTHREE;', $this->object->getBuffer());
        $this->object->push('PUSHFOUR;');
        $this->assertEquals('PUSHTHREE;PUSHFOUR;', $this->object->getBuffer());
        
        $this->object->stopBuffer();
        $this->assertEquals('PUSHONE;PUSHTWO;', $this->object->getBuffer());
    }
    
    /**
     * @covers PAF_Buffer_Memory::getBuffer
     */
    public function testGetBufferException()
    {
        $this->setExpectedException('PAF_Exception_NoSuchResource');
        $this->object->getBuffer();
    }

    /**
     * @covers PAF_Buffer_Memory::pull
     * @dataProvider pullProvider
     */
    public function testPull($content)
    {
        $this->object->push($content);
        $this->assertEquals($content, $this->object->get());
        
        $this->object->startBuffer();
        $this->object->push($content);
        $this->assertEquals($content, $this->object->get());
        $this->assertEquals($content, $this->object->getBuffer());
        
        $this->assertEquals($content, $this->object->pull());
        $this->assertEquals('', $this->object->getBuffer());
        $this->assertEquals($content, $this->object->get());
        
        $this->object->stopBuffer();
        $this->assertEquals($content, $this->object->pull());
        $this->assertEquals('', $this->object->get());
    }

    public function pullProvider()
    {
        $data = array();

        $data[] = array('a');
        $data[] = array('a ');
        $data[] = array(' a');
        $data[] = array('a' . PHP_EOL);
        $data[] = array(PHP_EOL . 'a');
        $data[] = array('a' . PHP_EOL . 'b');

        return $data;
    }

    /**
     * @covers PAF_Buffer_Memory::get
     * @dataProvider getProvider
     */
    public function testGet($content)
    {
        $this->assertEquals('', $this->object->get());
        $this->object->push($content);
        $this->assertEquals($content, $this->object->get());
    }

    public function getProvider()
    {
        return $this->pullProvider();
    }

    /**
     * @covers PAF_Buffer_Memory::stopBuffer
     * @covers PAF_Buffer_Memory::<protected>
     */
    public function testStopBuffer()
    {
        $this->object->startBuffer();
        $this->object->push('PUSHONE;');
        $this->assertEquals('', $this->object->get());
        
        $this->object->startBuffer();
        $this->object->push('PUSHTWO;');
        $this->assertEquals('PUSHTWO;', $this->object->getBuffer());
        $this->assertEquals('PUSHTWO;', $this->object->stopBuffer());
        $this->assertEquals('PUSHONE;', $this->object->getBuffer());
        
        $this->assertEquals('PUSHONE;', $this->object->stopBuffer());
        $this->object->push('PUSHTHREE;');
        $this->assertEquals('PUSHTHREE;', $this->object->get());
    }
    
        /**
     * @covers PAF_Buffer_Memory::stopBuffer
     */
    public function testStopBufferException()
    {
        $this->setExpectedException('PAF_Exception_NoSuchResource');
        $this->object->stopBuffer();
    }

    /**
     * @covers PAF_Buffer_Memory::__get
     */
    public function test__get()
    {
        $this->setExpectedException('PAF_Exception_NoSuchProperty');
        $this->object->unexistingProperty;
    }

    /**
     * @covers PAF_Buffer_Memory::flush
     * @dataProvider flushProvider
     */
    public function testFlush($content)
    {
        $this->object->push($content);
        $this->assertEquals($content, $this->object->get());
        $this->assertEquals($content, $this->object->flush());
        $this->assertEquals('', $this->object->get());
    }

    public function flushProvider()
    {
        return $this->pullProvider();
    }

    /**
     * @covers PAF_Buffer_Memory::__get
     */
    public function testId()
    {
        $ids = array();

        for ($i = 0; $i < 10; $i++)
        {
            $object = new PAF_Buffer_Memory();
            $id = $object->id;
            $this->assertNotContains($id, $ids);
            $ids[] = $id;
        }
    }

    /**
     * @covers PAF_Buffer_Memory::hasBuffer
     */
    public function testHasBuffer()
    {
        $this->assertFalse($this->object->hasBuffer());
        $this->object->startBuffer();
        $this->assertTrue($this->object->hasBuffer());
        $this->object->stopBuffer();
        $this->assertFalse($this->object->hasBuffer());
    }
}
